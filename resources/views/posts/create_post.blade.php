<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <link rel="stylesheet" href="{{ asset('css/global.css') }}">
    <link rel="stylesheet" href="{{ asset('css/create_post.css') }}">
    <style>
        .loading {
            display: none;
            margin: 10px 0;
            text-align: center;
            color: #975a1c;
        }

        .error-stats {
            display: none;
            margin: 10px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            color: #301b00;
        }

        mark {
            background-color: #ffd7d7;
            padding: 2px;
            border-radius: 3px;
            cursor: pointer;
        }

        mark:hover {
            background-color: #ffb7b7;
        }

        .error-tooltip {
            position: absolute;
            background: #301b00;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            z-index: 1000;
            display: none;
        }

        .suggestions {
            margin-top: 5px;
            font-size: 12px;
            color: #666;
        }

        .suggestion {
            cursor: pointer;
            padding: 2px 5px;
            margin: 2px;
            background: #e9ecef;
            border-radius: 3px;
            display: inline-block;
        }

        .suggestion:hover {
            background: #dee2e6;
        }
    </style>
    <title>Document</title>
</head>

<body>
    <div class="background">
        <section class="header_edit">
            <a class="logo_edit" href="{{ route('home') }}">
                <img src="{{ asset('images/logo.svg') }}" alt="–õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏">
            </a>
            <a href="{{ url()->previous() }}" class="back">
                
                ü†î –í–µ—Ä–Ω—É—Ç—å—Å—è
            </a>
        </section>
        <form method="POST" action="{{ route('create_post') }}" class="content">
            @csrf
            <input type="text" class="title_input" name="title" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" value="" required>
            @error('title')
                {{ $message }}
            @enderror
            <div id="editor" class="content_content" contenteditable="true" spellcheck="false"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."></div>
            @error('content')
                {{ $message }}
            @enderror
            <input type="hidden" name="content" id="content-hidden">
            <select name="genre" id="" class="genre" required>
                <option value="">–ñ–∞–Ω—Ä</option>
                <option value="–†–æ–º–∞–Ω—Ç–∏–∫–∞">–†–æ–º–∞–Ω—Ç–∏–∫–∞</option>
                <option value="–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞">–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞</option>
                <option value="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è">–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è</option>
                <option value="–î–µ—Ç–µ–∫—Ç–∏–≤">–î–µ—Ç–µ–∫—Ç–∏–≤</option>
            </select>
            @error('genre')
                {{ $message }}
            @enderror
            <select name="form" id="form-select" class="forma" required>
                <option value="">–§–æ—Ä–º–∞</option>
                <option value="—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ">–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ</option>
                <option value="–ø—Ä–æ–∑–∞">–ü—Ä–æ–∑–∞</option>
            </select>
            @error('format')
                {{ $message }}
            @enderror
            <button type="submit" name="action" value="publish" class="btn_content">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</button>
            <button type="submit" name="action" value="draft" class="btn_content">–í —á–µ—Ä–Ω–æ–≤–∏–∫</button>
            <button type="button" class="btn_content" onclick="checkText(event)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏</button>
            <div id="loading" class="loading">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞...</div>
            <div id="error-stats" class="error-stats"></div>

            @if(session('error'))
                <div class="alert alert-danger">
                    {{ session('error') }}
                </div>
            @endif
        </form>
    </div>
    <div id="error-tooltip" class="error-tooltip"></div>
</body>

<script>
    async function checkText(event) {
        event.preventDefault();

        const editor = document.getElementById('editor');
        const loading = document.getElementById('loading');
        const errorStats = document.getElementById('error-stats');
        const rawText = editor.innerText;

        if (!rawText.trim()) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
            return;
        }

        // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç —Å—Ç–∞—Ä—ã—Ö <mark> ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        editor.innerText = rawText;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const originalContent = editor.innerHTML;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading.style.display = 'block';
        errorStats.style.display = 'none';

        try {
            const response = await fetch('/api/check-text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ text: rawText })
            });

            const data = await response.json();

            if (data.error) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞');
            }

            if (!data.matches || data.matches.length === 0) {
                errorStats.innerHTML = '–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
                errorStats.style.display = 'block';
                document.getElementById('content-hidden').value = rawText;
                return;
            }

            let markedText = rawText;
            const matches = data.matches;

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
            matches.sort((a, b) => b.offset - a.offset).forEach(match => {
                const { offset, length, message, replacements } = match;
                const original = markedText.substring(offset, offset + length);
                // –¢–æ–ª—å–∫–æ <mark>, –±–µ–∑ suggestions –≤ —Ç–µ–∫—Å—Ç–µ
                const replacement = `<mark data-message="${message.replace(/"/g, '&quot;')}" data-original="${original}" data-replacements='${JSON.stringify(replacements || [])}'>${original}</mark>`;
                markedText =
                    markedText.slice(0, offset) +
                    replacement +
                    markedText.slice(offset + length);
            });

            editor.innerHTML = markedText;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            errorStats.innerHTML = `–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${matches.length}`;
            errorStats.style.display = 'block';

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
            document.querySelectorAll('mark').forEach(mark => {
                mark.addEventListener('mouseover', showTooltip);
                mark.addEventListener('mouseout', hideTooltip);
                mark.addEventListener('mousemove', moveTooltip);
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            document.getElementById('content-hidden').value = rawText;
        } catch (error) {
            alert(error.message);
        } finally {
            loading.style.display = 'none';
        }
    }

    function showTooltip(event) {
        const tooltip = document.getElementById('error-tooltip');
        const message = event.target.getAttribute('data-message');
        const replacements = JSON.parse(event.target.getAttribute('data-replacements'));
        let html = `<div>${message}</div>`;
        if (replacements && replacements.length > 0) {
            html += '<div style="margin-top:5px;">';
            replacements.forEach(r => {
                html += `<span class="suggestion" onclick="replaceTextFromTooltip(this, '${event.target.getAttribute('data-original')}', '${r.value}')">${r.value}</span>`;
            });
            html += '</div>';
        }
        tooltip.innerHTML = html;
        tooltip.style.display = 'block';
        tooltip.style.left = event.pageX + 10 + 'px';
        tooltip.style.top = event.pageY + 10 + 'px';
    }

    function moveTooltip(event) {
        const tooltip = document.getElementById('error-tooltip');
        tooltip.style.left = event.pageX + 10 + 'px';
        tooltip.style.top = event.pageY + 10 + 'px';
    }

    function hideTooltip() {
        const tooltip = document.getElementById('error-tooltip');
        tooltip.style.display = 'none';
    }

    function replaceTextFromTooltip(el, original, replacement) {
        const editor = document.getElementById('editor');
        // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–π <mark> —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        const marks = editor.querySelectorAll('mark');
        for (let mark of marks) {
            if (mark.textContent === original) {
                mark.outerHTML = replacement;
                break;
            }
        }
        document.getElementById('content-hidden').value = editor.innerText;
        hideTooltip();
    }

    document.addEventListener('DOMContentLoaded', function () {
        const formSelect = document.getElementById('form-select');
        const editor = document.getElementById('editor');
        const contentHidden = document.getElementById('content-hidden');

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è
        function updateHiddenContent() {
            contentHidden.value = editor.innerText;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
        editor.addEventListener('input', updateHiddenContent);

        function updateTextAlign() {
            const value = formSelect.value;

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
            editor.classList.remove('text-center', 'text-justify');

            if (value === '—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ') {
                editor.classList.add('text-center');
            } else if (value === '–ø—Ä–æ–∑–∞') {
                editor.classList.add('text-justify');
            }
        }

        // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        updateTextAlign();
        updateHiddenContent();

        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã
        formSelect.addEventListener('change', updateTextAlign);
    });

</script>

</html>